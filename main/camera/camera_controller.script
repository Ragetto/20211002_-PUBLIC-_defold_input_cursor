---========================---
---== LUA MODULE IMPORTS ==---
---========================---
local debugdraw = require "lua-modules.libs-defold.debug-draw.debug-draw"
local defmath = require "lua-modules.libs-defold.defmath.defmath"
local lume = require "lua-modules.libs-external.lume.lume"
local gui_extra = require "lua-modules.libs-defold.gui_extra.gui_extra"
local monarch = require "lua-modules.libs-defold.monarch.monarch"
local rc = require "lua-modules.libs-defold.rendercam.rendercam"
local cursor = require "lua-modules.libs-defold.defold-input.cursor"
local csv = require "lua-modules.libs-defold.csv-importer.csv-importer"
local c = require "lua-modules.gamedata.constants"
local f = require "lua-modules.libs-self.functions"

---========================---
---========================---

function init(self)
	self.camera_pos_old = vmath.vector3()
	self.camera_pos_cur = vmath.vector3()
	self.camera_move_dir = vmath.vector3(0,0,0)
	self.camera_move_speed_cur = 0	
	self.camera_move_decel = 0.025
	--
	self.mouse_pressed = 0 -- 0: released / 1: pressed
	self.mouse_pos_old = vmath.vector3()
	self.mouse_pos_cur = vmath.vector3()
	self.mouse_move_dir_log = {}
end


function update(self, dt)

	-- JC 02/10/2021 18:29 # This is where I make the cursor follow the mouse position in real time
	-- the rest is in the input function
	msg.post("cursor#cursor", "input", { action_id = self.action_id, action = self.action })

	------------------------------------------------------------------------------------------
	
	self.mouse_pos_old = self.mouse_pos_cur

	if self.mouse_pressed == 0 then
		vector_dir = vmath.vector3(0,0,0)
	end

	if self.mouse_pressed == 1 then
		local avg_x,avg_y,avg_z = average_table_vector3(self.mouse_move_dir_log)
		self.camera_move_dir = vmath.vector3(avg_x,avg_y,avg_z)
		self.camera_move_speed_cur = 1

		local max = tablelength(self.mouse_move_dir_log)
		if tablelength(self.mouse_move_dir_log) > (c.SCROLLING_MAX_NB_FRAMES-1) then
			table.remove(self.mouse_move_dir_log,1)
		end
		table.insert(self.mouse_move_dir_log, self.mouse_move_dir)
	end

	if self.mouse_pressed == 2 then
		-- delete the direction log		
		-- inertia
		if self.camera_move_speed_cur > 0 then
			self.camera_move_speed_cur = self.camera_move_speed_cur - self.camera_move_decel
		else
			self.camera_move_speed_cur = 0
			self.mouse_pressed = 0
			emptytable(self.mouse_move_dir_log)	
		end
	end

	rc.pan(-self.camera_move_dir.x * self.camera_move_speed_cur * c.SCROLLING_SENSIVITY*c.SCROLLING_X, -self.camera_move_dir.y * self.camera_move_speed_cur * c.SCROLLING_SENSIVITY*c.SCROLLING_Y, "/camera")
	
end

function on_input(self, action_id, action)
	
	self.mouse_pos_cur = vmath.vector3(action.x, action.y, 0)
	self.mouse_move_dir = self.mouse_pos_cur - self.mouse_pos_old

	-- JC 01/10/2021 20:18 # Fixed by Britzl (camera/scrolling desynchronization)
	-- https://forum.defold.com/t/rendercam-defold-input-weird-cursor-position-when-scrolling/69387/4
	-- we convert the screen mouse position into an "object" position in the world
	-- missing: "real-time following even when the mouse doesn't move" + "cursor teleporting to mouse position when clicking"
	local mouse_pos_cur_WORLD = rc.screen_to_world_2d(self.mouse_pos_cur.x, self.mouse_pos_cur.y)
	action.x = mouse_pos_cur_WORLD.x
	action.y = mouse_pos_cur_WORLD.y
	self.action_id = action_id
	self.action = action
	--msg.post("cursor#cursor", "input", { action_id = action_id, action = action })

	if action.pressed and action_id == hash("touch") then
		self.mouse_pressed = 1
	elseif action.released then
		self.mouse_pressed = 2
	end
end